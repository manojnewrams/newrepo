variables:
  DOCKER_DRIVER: overlay
  DOCKER_HOST: localhost
  DOCKER_TLS_CERTDIR: ""

include:
  - project: 'gitlab-templates/ci-templates/java/gradle'
    file: 'gitlab-ci-template.yml'
  - project: 'gitlab-templates/ci-templates/build/docker'
    file: 'gitlab-ci-template.yml'  

stages:
  - build
  - test
  - pushImage
  - deploy

build:
  stage: build
  image: gradle:6.0.1-jdk8
  extends: .gradle_java_build
  tags:
    - runnerk8s

.test:
  stage: test
  script:
    - gradle test

pushImage:
  stage: pushImage
  extends: .docker_image_creation
  tags:
    - runnerk8s
  before_script:
    - docker login $URL_REGISTRY -u $USER -p $TOKEN
  script:
    - echo $DOCKER_HOST
    - docker info
    - docker build -t $USER/$APP_NAME:$CI_COMMIT_SHORT_SHA . 
    - docker push $USER/$APP_NAME:$CI_COMMIT_SHORT_SHA

deployInAws:
  stage: deploy
 # image: lgatica/openssh-client:latest
  image: ubuntu:xenial
  tags:
    - runnerk8s
  before_script:
#    - apt-get update -y
 #   - apt-get upgrade -y
  #  - apt-get install openssh-client -y
   # - service ssh start
    - apt-get update
    - apt-get install -y cl-base64
    - apt-get install -y openssh-client
    - mkdir ~/.ssh
    - echo $SSH_PRIVATE_KEY | base64 -d > /root/.ssh/hostkey.pem
  #  - echo $SSH_PRIVATE_KEY > /root/.ssh/hostkey.pem
    - chmod 600 /root/.ssh/hostkey.pem
  script:
    #- 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    #- mkdir -p ~/.ssh
  #  - eval $(ssh-agent -s)
  #  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  #  - echo "Host * StrictHostKeyChecking no" > ~/.ssh/config
  #  - chmod 400 ~/.ssh
  #  - ssh -t -t  $AWS_HOST
  #  - ssh-keygen -R $AWS_HOST
  #  - echo "$AWS_HOST" > ~/.ssh/known_hosts
  #  - echo $AWS_HOST
  #  - ssh-keygen -H -R ${AWS_HOST} >> ~/.ssh/known_hosts
  #  - ssh -t -t $AWS_HOST
    - cat /root/.ssh/hostkey.pem
    - ssh -i /root/.ssh/hostkey.pem -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o ConnectTimeout=10 $AWS_HOST docker pull $USER/$APP_NAME:$CI_COMMIT_SHORT_SHA
    #- docker login $URL_REGISTRY -u $USER -p $TOKEN 
    # docker pull $USER/$APP_NAME:$CI_COMMIT_SHORT_SHA && docker run -p 8080:8080 $USER/$APP_NAME:$CI_COMMIT_SHORT_SHA