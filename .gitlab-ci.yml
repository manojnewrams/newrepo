variables:
  DOCKER_DRIVER: overlay
  DOCKER_HOST: localhost
  DOCKER_TLS_CERTDIR: ""
  TAG_FOR_IMAGES: $CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA

include:
  - project: 'gitlab-templates/ci-templates/java/gradle'
    file: 'gitlab-ci-template.yml'
  - project: 'gitlab-templates/ci-templates/build/docker'
    file: 'gitlab-ci-template.yml'  
  - project: 'gitlab-templates/ci-templates/deploy/aws/aws-direct-ec2-instance'
    file: 'gitlab-ci-template.yaml'

stages:
  - build
 # - test
  - pushImage
  - deploy
  - deployGCP

build:
  stage: build
  image: gradle:6.0.1-jdk8
  extends: .gradle_java_build
  tags:
    - runnerk8s

.test:
  stage: test
  script:
    - gradle test

pushImage:
  stage: pushImage
  extends: .docker_image_creation
  tags: 
    - runnerk8s
  before_script:
    - docker login $URL_REGISTRY -u $USER -p $TOKEN
  script:
    - echo $DOCKER_HOST
    - echo $TAG_FOR_IMAGES
    - docker info
    - docker build -t $USER/$APP_NAME:$TAG_FOR_IMAGES . 
    - docker push $USER/$APP_NAME:$TAG_FOR_IMAGES

.deployMaster:
  extends: .deploy_into_ec2_instance
  tags:
    - runnerk8s
  script:
    - echo $SSH_PRIVATE_KEY | base64 -d > $URL_KEY
    - chmod 600 $URL_KEY
    - scp -i $URL_KEY -o $KNOWN_HOST_FILE -o $KEY_CHECKING -o ConnectTimeout=10 deployEnv/deployMaster.sh $AWS_HOST:/tmp/
    - ssh -i $URL_KEY -o $KNOWN_HOST_FILE -o $KEY_CHECKING -o ConnectTimeout=10 $AWS_HOST "/tmp/deployMaster.sh $USER $APP_NAME $TAG_FOR_IMAGES"
  only: 
    - master  

.deployDev:
  extends: .deploy_into_ec2_instance
  tags:
    - runnerk8s
  script:
    - echo $SSH_PRIVATE_KEY | base64 -d > $URL_KEY
    - chmod 600 $URL_KEY
    - scp -i $URL_KEY -o $KNOWN_HOST_FILE -o $KEY_CHECKING -o ConnectTimeout=10 deployEnv/deployDev.sh $AWS_HOST:/tmp/
    - ssh -i $URL_KEY -o $KNOWN_HOST_FILE -o $KEY_CHECKING -o ConnectTimeout=10 $AWS_HOST "/tmp/deployDev.sh $USER $APP_NAME $TAG_FOR_IMAGES"
  only:
    - develop   

.deployQA:
  extends: .deploy_into_ec2_instance
  tags:
    - runnerk8s
  script:
    - echo $SSH_PRIVATE_KEY | base64 -d > $URL_KEY
    - chmod 600 $URL_KEY
    - scp -i $URL_KEY -o $KNOWN_HOST_FILE -o $KEY_CHECKING -o ConnectTimeout=10 deployEnv/deployQA.sh $AWS_HOST:/tmp/
    - ssh -i $URL_KEY -o $KNOWN_HOST_FILE -o $KEY_CHECKING -o ConnectTimeout=10 $AWS_HOST "/tmp/deployQA.sh $USER $APP_NAME $TAG_FOR_IMAGES"
  only:
    - qa

.deploy:
  extends: .deploy_into_ec2_instance
  tags:
    - runnerk8s
  script:
    - echo $SSH_PRIVATE_KEY | base64 -d > $URL_KEY
    - chmod 600 $URL_KEY
    - scp -i $URL_KEY -o $KNOWN_HOST_FILE -o $KEY_CHECKING -o ConnectTimeout=10 deployEnv/deploy.sh $AWS_HOST:/tmp/
    - ssh -i $URL_KEY -o $KNOWN_HOST_FILE -o $KEY_CHECKING -o ConnectTimeout=10 $AWS_HOST "/tmp/deploy.sh $USER $APP_NAME $TAG_FOR_IMAGES"

deployGCP:
  stage: deployGCP
  image: google/cloud-sdk
  tags:
    - runnerk8s
  only:
    - developDevOps
  script:
    - echo "$SERVICE_ACCOUNT_KEY" > gke-token.json
    - gcloud auth activate-service-account --key-file=gke-token.json
    - gcloud config set project cert-ins-jv
    - gcloud config set container/cluster k8s-test-4
    - gcloud config set compute/zone us-central1
    - gcloud container clusters get-credentials k8s-test-4 --zone us-central1
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
   # -./kubectl create secret generic registry.hub.docker --from-literal=Docker_User=$"USER" --from-literal=Docker_Password=$"TOKEN" --dry-run -o yaml | kubectl apply -f -
    - ./kubectl apply -f 5award-namespace.yml
    - echo $TAG_FOR_IMAGES 
    - ENV_NEW=$(cat deployment-app.yml | sed "s/{{imagen}}/$TAG_FOR_IMAGES/g)  
    - echo "$ENV_NEW"
    - echo "$ENV_NEW" > deployment-app.yaml
    - ./kubectl apply -f deployment-app.yaml -n default
    - ./kubectl apply -f service-app.yaml -n default   
   # - ./kubectl get nodes -o wide





